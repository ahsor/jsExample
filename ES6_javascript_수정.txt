[js 실행]
node ./src/02/02-2.js

[배열데이터 처리]
var person=[30, "홍길동", true];
$('body').append('1. 배열데이터 그대로 사용 <br>')  
$('body').append( person[0] +'<br>');
$('body').append( person[1] +'<br>');
$('body').append( person[2] +'<br>');

//for문을 적용함. 3은 배열 객체에 저장된 데이터 개수.
$('body').append('2. for문을 적용함 <br>')  
for(var i=0; i<3; i++){
 $('body').append( person[i] +'<br>');
}

/*배열의 length(저장된 데터의 개수) 속성을
이용해 반복문의 조건식에 적용함.*/
$('body').append('3. 배열의 length 사용 <br>')
for(var i=0; i<person.length; i++){
 $('body').append( person[i] +'<br>');
}

/*for in문을 적용함. 변수 i의 값은 0부터 
배열 객체의 데이터 개수만큼 증가됨.*/
$('body').append('4. for in문을 적용함 <br>')
for(i in person){
  $('body').append( person[i] +'<br>');
}

$('body').append('5. forEach 사용 <br>')  
  person.forEach(result, function(){
      $('body').append( result +'<br>');
  })
  

[Object 만들기]
// 명함을 만들기 위한 데이터를 선언합니다. 
var person = {
    name: '홍길동',
    tel: '010-5789-9632',
    fax: '02-7896-4478',
    email: 'honggilgdong@gmail.com'
};

console.log( person.name );
document.write( person.name );
    
// 변수를 선언합니다.
var object = {
    'with space': 273,
    'with ~!@#$%^&*()_+': 52
};

[다양한 데이터 타입의 Object ]
var object = {
    number: 273,
    string: 'RintIanTta',
    boolean: true,
    array: [52, 273, 103, 32],
    method: function () {
        console.log('객체값' , number )
    }
};

var person = {
    name: '홍길동',
    food:'비빔밥',
    eat: function () { 
        console.log( this.name + '이 ' + food + '을/를 먹습니다.' );
                                    // error
    }
};
person.eat();

var person = {
    name: '홍길동',
    food:'비빔밥',
    eat: function () { 
        console.log( this.name + '이 ' + this.food + '을/를 먹습니다.' )
    }
};
person.eat();

var person = {
    name: '홍길동',
    eat: function (food) {
        alert(this.name + '이 ' + food + '을/를 먹습니다.');
    }
};

// 메서드를 호출합니다.
person.eat('밥');
// 메서드를 호출합니다.

[Oject를 만드는 다른 방법]
var student = {};

// 객체에 속성을 추가합니다.
student.name = 'jemicom';
student.habby = '길찾기';
student.type = '프로그래밍';
student.hope = '버섯공학자';
console.log( student.name, student.habby, student.type, student.hope );

[example : 특정 제품을 선택하여 속성이 4개인 Object를 생성하고 값을 출력하세요. ]



[Object와 반복문1]
// 변수를 선언합니다.
var product = {
    name: 'Microsoft Visual Studio',
    price: '15,000,000원',
    language: '한국어',
    supportOS: 'Win 32/64',
    subscription: true
};

// 출력합니다.
var output = '';
for (var key in product) {
    output += '●' + key + ': ' + product[key] + '\n';
}
alert(output);

[Object와 반복문2]
var student = {};
student.name = 'jemicom';
student.habby = '길찾기';
student.type = '프로그래밍';
student.hope = '버섯공학자';
// toString() 메서드를 만듭니다.
student.toString = function () {
    var output = '';
    for (var key in this) {
        // toString() 메서드는 출력하지 않게 합니다.
        if (key != 'toString') {
            output += key + '\t' + this[key] + '\n';
        }
    }
    return output;
};

// 출력합니다.
alert(student.toString());

[Object 삭제]
var student = {};
student.name = 'jemicom';
student.habby = '길찾기';
student.type = '프로그래밍';
student.hope = '버섯공학자';

// toString() 메서드를 만듭니다.
student.toString = function () {
    var output = '';
    for (var key in this) {
        // toString() 메서드는 출력하지 않게 합니다.
        if (key != 'toString') {
            output += key + '\t' + this[key] + '\n';
        }
    }
    return output;
};

// 출력합니다.
alert(student.toString());

// 속성을 제거합니다.
delete (student.hope);

// toString() 메서드를 사용하지 않아도 toString() 메서드를 사용합니다.
 alert(student);
 
 
[Object와 반복문]
var memberArray = ['jemicom', 'subject', 'kim'];
console.log("memberArray[2]", memberArray[2]);

var memberObject = {
    manager:'jemicom',
    developer:'subject', 
    designer:'kim'
}
memberObject.designer = 'ahsor';
console.log("memberObject.designer", memberObject.designer);
console.log("memberObject['designer']", memberObject['designer']);
delete memberObject.manager;
console.log('after delete memberObject.manager', memberObject.manager); 

for(var name in memberObject){
    console.log(name, memberObject[name]);
}


[Object 출력2 : 템플릿문자]
var student = {
    이름: 'jemicom',
    국어: 92, 수학: 98,
    영어: 96, 과학: 98
};

// 출력합니다.
var output = '';
output += '이름: ' + student.이름 + '\n';
output += '국어: ' + student.국어 + '\n';
output += '수학: ' + student.수학 + '\n';
output += '영어: ' + student.영어 + '\n';
output += '과학: ' + student.과학 + '\n';
output += '총점: ' + (student.국어 + student.수학 + student.영어 + student.과학);

output += ` 이름 : ${student.이름}
            국어 : ${student.국어}   
            수학 : ${student.수학}   
            영어 : ${student.영어}   
            과학 : ${student.과학}   
            총점 : ${student.국어+student.수학+student.영어+ student.과학}` 
            
alert(output);

[example : 성적처리 객체를 인원수만큼 만드세요.]
var student0 = { name: '홍길동', kor: 87, math: 98, eng: 88, scien: 95 };
var student1 = { name: '박길동', kor: 92, math: 98, eng: 96, scien: 98 };
var student2 = { name: '우길동', kor: 76, math: 96, eng: 94, scien: 90 };
var student3 = { name: '나길동', kor: 98, math: 92, eng: 96, scien: 92 };
var student4 = { name: '윤길동', kor: 95, math: 98, eng: 98, scien: 98 };
var student5 = { name: '오길동', kor: 64, math: 88, eng: 92, scien: 92 };
var student6 = { name: '김길동', kor: 82, math: 86, eng: 98, scien: 88 };
var student7 = { name: '임길동', kor: 88, math: 74, eng: 78, scien: 92 };
var student8 = { name: '이길동', kor: 97, math: 92, eng: 88, scien: 95 };
var student9 = { name: '서길동', kor: 45, math: 52, eng: 72, scien: 78 };

[배열에 객체 저장하기]
// 학생 정보 배열을 만듭니다.
var students = [];
students.push({ name: '홍길동', kor: 87, math: 98, eng: 88, scien: 95 });
students.push({ name: '박길동', kor: 92, math: 98, eng: 96, scien: 98 });
students.push({ name: '우길동', kor: 76, math: 96, eng: 94, scien: 90 });
students.push({ name: '나길동', kor: 98, math: 92, eng: 96, scien: 92 });
students.push({ name: '윤길동', kor: 95, math: 98, eng: 98, scien: 98 });
students.push({ name: '오길동', kor: 64, math: 88, eng: 92, scien: 92 });
students.push({ name: '김길동', kor: 82, math: 86, eng: 98, scien: 88 });
students.push({ name: '임길동', kor: 88, math: 74, eng: 78, scien: 92 });
students.push({ name: '이길동', kor: 97, math: 92, eng: 88, scien: 95 });
students.push({ name: '서길동', kor: 45, math: 52, eng: 72, scien: 78 });

for (var i in students) {
    // 총점 구하는 메서드를 추가합니다.
    students[i].getSum = function () {
        return this.kor + this.math + this.eng + this.scien;
    };

    // 평균을 구하는 메서드를 추가합니다.
    students[i].getAverage = function () {
        return this.getSum() / 4;
    };
}

// 출력합니다.
var output = '이름\t총점\t평균\n';
for (var i in students) {
    with (students[i]) {
        output += name + '\t' + getSum() + '\t' + getAverage() + '\n';
    }
}
alert(output);

[ spread(전개) 연산자 ]
-나열형 자료를 추출하거나 연결시 사용
- 객체, 변수명 앞에 (...) 마침표 3개를 입력
- [], {} ,() 안에서만 사용


[ternary 연산자]
const isCat = true; 
{
    let component;
    if(isCat){
       component = '고양이';
    }else{
       component = '강아지';
    }
    console.log(component);
}

[ternary 연산자]
const isCat = true; 
{
    let component= isCat? '고양이': '강아지';
   
    console.log(component);
}

[배열 불변하게 사용 1]
 const arr = [];
/*1
// arr = [ 1, 2, 3 ];
 Uncaught TypeError: Assignment to constant variable.
at test01.html:12
*/
/*
arr.push( 1, 2, 3);
// 언제 변경되었는지 알 수 없음, concat()으로 변경 
*/
arr.concat( 1,2,3 );
console.log( arr); 
// arr 이 변경되지 않음 확인

const arr2 = arr.concat(1, 2, 3);
const arr3 = arr2.concat(4);
console.log(arr, arr2, arr3)

[배열 불변하게 사용 2]
const arr = [0,1,2,3];
        
console.log( arr.slice(0, 1)); 
// 1이전의 항목을 리턴하여 사용 가능

const arr2 = arr.slice(1, arr.len);
// shift() 매서드 대신 사용 
// len을 전달하지 않으면 무조건 마지막 항목까지 사용 
console.log(arr, arr2);
  
  const arr3 = arr.slice(0, arr.length-1);
// pop() 매서드 대신 사용
// len을 전달하지 않으면 무조건 마지막 항목까지 사용
console.log(arr, arr3 );

[배열 불변하게 사용 3]
 const arr = [0,1,2,3];
// 중간에 항목 끼우기 
console.log( arr.slice(0, 1)); 

// concat 과 slice를 합쳐서 사용하기 
const arr4 = [
    ...arr.slice(0, 1),
    92, 91 ,93 ,
    ...arr.slice(1)
]
// 0과 1사이 인덱스에 3개 데이터 삽입
console.log( arr4 )

[객체 불변하게 사용하기1 ]
const obj = { 
    a:1,
   b:2
};
obj.a = 3; // 객체 변형 발생
console.log(obj);

const obj2 = {
   ...obj, 
   a:3
}
console.log(obj2)

[전개 연산자 ]
var array1 = ['one', 'two'];
var array2 = ['three', 'four'];

var combined = [array1, array2];
console.log(combined)

var combined2 = [...array1, ...array2];
console.log(combined2)

var combined3 = ['zero', ...array1,'add', ...array2];
console.log(combined3)

var [first, second] = array1; 
console.log( first, second);

var [one, ...other] = combined2; 
console.log( one, other);
// 나머지는 배열로 출력

function func(){
console.log(arg)
}
func(1,2,3);

function func2(arr1, ...args){
// 나머지 배열로 추출, 배열은 항상 마지막에만 사용가능 
console.log(arr1)
console.log(args)
}
func2(1,2,3);

[ 오브젝트 추출 ]
var object1 = { one:1, two:2, other:0 }
var object2 = { three:3, four:4 }
var comObj = { ...object1, ...object2 }
console.log(comObj)

var object3 = { three:15, four:4 }
var comObj2 = { ...object3, ...object2 }
// 객체의 값이 중복된다면 뒤의 값이 살아 남음
// 병합 순서 중요
console.log(comObj2)

var {one} = object1;
// var one = 1 선언과 동일한 모양 
// 반드시 변수명을 키값과 동일한 이름을 사용해야 한다. 
console.log(one);

var two = 9;
// 변수명이 중복된다면 다음과 같이 새로운 이름을 생성할 수 있다. 
var { two : myTwo } = object1; 
console.log(myTwo)

///////////////////////////////////
[ 오브젝트 추출 ]
var object1 = { one:1, two:2, other:0 }
var object2 = { three:3, four:4 , obj : object1 }
var { obj:myObj } = object2;
// 변수명이 겹칠때는 변수명을 지정하는 것이고
// 다중 객체인 경우 다중 객체의 값을 지정하는 것임 one 값 출력
console.log(myObj)

var { obj:{ two } } = object2;
// one 값 출력
console.log(two)

var { obj:{ two : myTwo } } = object2;
// one 값 출력
console.log(myTwo)

[ 객체를 만들기 전 모양]
var MyMath_PI = Math.PI;
function MyMath_random(){
    return Math.random();
}

function MyMath_floor(val){
    return Math.floor(val);
}

[ 객체로 만들어진 후 ]
var MyMath = {
    PI : Math.PI,
    random:function(){
        return Math.random();
    },
    floor:function(val){
        return Math.floor(val);
    }
}
console.log( 'MyMath.PI', MyMath.PI );
console.log( 'MyMath.random()', MyMath.random() );
console.log( 'MyMath.floor(3.9)', MyMath.floor(3.9) );

[클래스와 오브젝트 ]
조금더 연관있는 데이터 끼리 변수와 메소드로 묶어 둔 것
클래스는 붕어빵을 만드는 틀(청사진, 템플릿)로 정의만 한 것으로 
붕어빵으로 만들어지는 데 이를 오브젝트라고 한다. 


[ this ]
1. 
var kim = {
    name : 'kim',
    first :  10,
    second : 20,
    sum:function(f,s){  // 필요없는 변수 선언이 됨 
        return f + s; 
    }
}
console.log( kim.sum( kim.first , kim.second ));

2. 
var kim = {
    name : 'kim',
    first :  10,
    second : 20,
    sum:function(){         // 변수는 생략하였으나 
        return kim.first + kim.second; // 여전히 유연성은 떨어짐 
    }
}
console.log( kim.sum( ));

3. 
var kim = {
    name : 'kim',
    first :  10,
    second : 20,
    sum:function(){     
        return this.first + this.second;  
    }
}
console.log( kim.sum( ));
console.log( `${ kim.first , kim.second }` );

[ 생성자 : constructor ]
Date 객체 
1. 일반적인 객체 
var kim = {
    name = 'kim';
    first = 10;
    second = 30;
    sum:function(){ 
        return this.first + this.second; 
    }
}

2. 생성자 함수
function Person(){
    this.name = 'kim';
    this.first = 10;
    this.second = 30;
    this.sum = function(){ 
        return this.first + this.second; 
    }
}
console.log( new Person() );

var kim = new Person();
var park = new Person();
console.log( kim.sum() );
console.log( park.sum() );

3. 인수를 전달하는 생성자 함수 
function Person(name, first, second){
    this.name = name;
    this.first = first;
    this.second = second;
    this.sum = function(){ 
        return this.first + this.second; 
    }
}

var kim = new Person('kim', 10, 20);
var park = new Person( 'park', 10, 30 );
console.log( kim.sum() );
console.log( park.sum() );

[example : 생성자 함수를 이용하여 성적처리를 하시오? ]



[ prototype ]
function Person(name, first, second){
    this.name = name;
    this.first = first;
    this.second = second;
}

Person.prototype.sum = function(){ 
        return 'prototype' + (this.first + this.second); 
    }
    // 수십개의 오브젝트가 생성되도 함수는  공유하는 것으로 메모리 절약
var kim = new Person('kim', 10, 20);
var park = new Person( 'park', 10, 30 );
console.log( kim.sum() );
console.log( park.sum() );

// 또한 특정한 객체의 함수만 재정의 할 수 있음 
kim.sum = function(){ 
        return 'this : ' + (this.first + this.second); 
    }
console.log( kim.sum() );
console.log( park.sum() );

// 실행 순서 확인 할 것 객체 자신의 kim.sum을 먼저 찾고 없으면 생성자함수를 찾고, prototype을 찾는다. 
<script>
        // 생성자 함수 = 일반함수 실행 알고리즘은 같음
        // 어떠한 함수라도 new를 붙이면 생성자 함수가 됨
        // 때문에 생성자 함수는 첫글자를 대문자로 사용하는 것이 관례
        function User(name, age){
            this.name = name; 
            this.age = age; 
            this.sayName = function(){
                return this.name; 
            }
        }
        let kim = new User('kim', 30);
        let hong = new User('hong', 33);
        let park = new User('park', 31);
        console.log(kim, hong, park)
        console.log(kim.sayName());

        function Item(title, price){
            this.title = title; 
            this.price = price; 
            this.showPrice = function(){
                console.log(`가겨은 ${price} 입니다. `)
            }
        }
        const item1 = new Item('장난감', 3000)
        const item2 = Item('가방', 13000);
        // new 없다면 그냥 함수가 실행되는 것으로 undefinde
        const item3 = new Item('사탕', 9000)
        console.log( item1, item2, item3 );
        item3.showPrice();

        // Computed property
        let a = 'age';
        const user = {
            name : 'kim',
            [a] : 30 
            // 배열이 아니라 'age' : 30 
        }
        console.log( user.age );

        const math = {
            [1+4] : 5,
            ['안녕'+'하세요'] : 'hello'
            // 배열이 아니라 'age' : 30 
        }
        console.log( math );

        //Object.assign(); 객체 복제
        let lee = user; 
        lee.name='lee'; // 객체를 복사하는 것이 아니라 값을 공유하는 것 
        console.log(lee.name)
        console.log(user.name) // 원본의 값도 바뀐다. 

        // 병합1
        const newUser = Object.assign({}, user);
        newUser.name = 'newKim';
        console.log( newUser.name);
        console.log( user.name);

        // 병합2
        const newUser2 = Object.assign({ gender:'male'}, user);
                                // 성별값만 있는 객체가 user를 병합함 
                                // 즉 새로운 객체는 필드가 3개임 
        console.log( newUser2);
        console.log( user);

        // 병합3
        const newUser3 = Object.assign({ name:'park'}, user);
                                // 필드명이 같은데 병합한 경우 덮어쓰게 됨 
        console.log( newUser3);
        console.log( user);

        // 병합4
        const p1 = {
            name :'kim'
        }
        
        const p2 = {
            age : 30
        }
        
        const p3 = {
            tel :'010'
        }
    
        const info1 = Object.assign(p1, p2, p3);
                                // p1에 p2와 p3를 병합함
        console.log( p1, p2, p3, info1);
        /*
        Object.assign(p1, p2, p3);
            // p1에 p2와 p3를 병합함
        console.log( p1, p2, p3);
        */

        // Object.keys() :  객체의 속성 값만을 배열로 반환
        console.log( Object.keys(user) ); // 즉 [ 'name', 'age']
        
        // Object.values() :  객체의 값만을 배열로 반환
        console.log( Object.values(user) ); // 즉 [ 'kim', 30]

        // Object.entries() :  객체의 속성/값을 묶어서 하나의 배열로 반환
        console.log( Object.entries(user) ); // 즉 [ 'name', 'kim'], ['age': 30]

        // Object.fromEntries() :  속성/값배열을 객체로 반환
        const arr = [
            ['name', 'kim'],
            ['age', 30],
            ['gender','male']
        ]
        console.log( Object.fromEntries(arr) ); // 즉 [ 'name', 'kim'], ['age': 30]


        /// example

        let n = "name";
        let aa = "age";
        const user10 = {
            [n]:'kim',
            [aa]:30,
            [1+4]:5
        }
        console.log(user10);

        // 발전적인 형태 
        function makeObj(key, val){
            return {
                [key] : val
            }
        }
        const obj1 = makeObj('이름', 'kim');
        console.log(obj1);
        // 어떤 값이 키가 될지 모를때 사용할 수 있음 
        const obj2 = makeObj('age', 30);
        console.log(obj2);
        const obj3 = makeObj('성별', 'male');
        console.log(obj3);

        // es6에 추가된 class
        /* 생성자 함수를 다음과 같이 변형할 수 이씀
        function User(name, age){
            this.name = name; 
            this.age = age; 
            this.sayName = function(){
                console.log( this.name); 
            }
        }
        */
       class User2{
           constructor(name,age){
               this.name = name;
               this.age = age; 
           }
           showName(){
            // User.prototype.showName 과 같음
               console.log(this.name);
           }
       }
       const tom =  new User2('tom', 19);
       tom.showName();
       //new 없이 사용한다면 
       // 생성자 함수는 반환하는 값이 없으므로 undefinde 출력
       // 문제 없는 것임
       // class는  Uncaught TypeError: Class constructor User2 cannot be invoked without 'new' at test02.html:167
       /*
       // example
       class Car{
            constructor( color){
                this.color = color; 
                this.wheels = 4; 
            }
            drive(){
                console.log('dirve..');
            }
            stop(){
                console.log('stop!!')
            }
       }
       class Bmw extends Car{
           park(){
               console.log('PARK'); 
           }
           stop(){
                super.stop();  // car의 stop()을 사용
                console.log('end!!')
            }
            // 부모의 메소드를 오버라이드 하면 덮어쓰기가 되고 자신의 메소드 사용
             // 만약 부모의 기능도 사용하고 싶다면 super를 사용 
       }
       const test1 = new Bmw('blue');
       // 콘솔에서 직접 test1; 실행하여 데이타 타입 확인할 것
       test1.drive();
       // Bmw에서 drive를 찾고 없으면 부모로 부터 찾아서 사용 
       test1.stop();
       // 부모의 메소드를 오버라이드 하면 덮어쓰기가 되고 자신의 메소드 사용
       // 만약 부모의 기능도 사용하고 싶다면 super를 사용 
       */

       // 
       class Car{
            constructor( color){
                this.color = color; 
                this.wheels = 4; 
            }
            drive(){
                console.log('dirve..');
            }
            stop(){
                console.log('stop!!')
            }
       }
       class Bmw extends Car{
            constructor( ){
                // super(); // 에러 부모는 color가 있으므로 이값도 전달해야 함 
                // super('blue')
                this.navigation = 1; 
                // 에러 발생 자식 생성자에서는 
                // this사용전에 반드시 부모 생성자를 호출해야 함 
            }
            // constructor가 없는 경우 다음이 있는 것과 같이 실행 
            /*
            constructor( ...args ){
               super(...args); 
            }
            */
           park(){
               console.log('PARK'); 
           }
           stop(){
                super.stop();  // car의 stop()을 사용
                console.log('end!!')
            }
            // 부모의 메소드를 오버라이드 하면 덮어쓰기가 되고 자신의 메소드 사용
             // 만약 부모의 기능도 사용하고 싶다면 super를 사용 
       }
    </script>

[class : https://babeljs.io > try it out ]
1.
class Person{
    // 빈클래스
}
var kim = new Person();
console.log( kim );

2. 
class Person{
    constructor(){
        console.log( '생성자' );
    }
    constructor(name, first, second){
        this.name = name; 
        this.first = first;
        this.second = second; 
    }
     
}
var kim = new Person( 'kim' , 30, 20 );
console.log( kim );

3. 객체와 같이 메소드 추가 
Person.prototype.sum = function(){ 
        return 'prototype : ' + (this.first + this.second); 
    }
console.log( kim.sum() );


4.
class Person{
    constructor(){
        console.log( '생성자' );
    }
    constructor(name, first, second){
        this.name = name; 
        this.first = first;
        this.second = second; 
    }
    sum(){ // 객체 함수 
        return 'class inner : ' + (this.first + this.second); 
    } 
}


[ 상속 ]
class PersonPlus extends  Person{
    avg(){
        return (this.first + this.second)/2; 
    }
}

[ super()와 super ]
class PersonPlus extends  Person{
    constructor(name, first, second, third){
        super( name, first, second )
        this.third = third; 
    }
    sum(){
        return super.sum() = this.third; 
    }
    avg(){
        return (this.first + this.second)/2; 
    }
}


[ create() ]
var superObj = { superVal : 'super' }
var subObj = { subVal : 'sub' }
var subObj = object.create( superObj ); // 상속 
subObj.subVal = 'sub';

debugger; 

console.log( subObj.subVal )
console.log( superObj.superVal )

kim = {
    name : 'kim',
    first : 10,
    second : 30,
    sum:function(){ 
        return this.first + this.second; 
    }
}
console.log( kim.sum() );

var lee = Object.create(kim);
lee.name = 'lee';
lee.first = 10;
lee.second = 10;
lee.avg = function(){
    return (this.first + this.second)/2;
}


















